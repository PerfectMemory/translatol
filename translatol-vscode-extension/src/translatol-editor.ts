import * as vscode from 'vscode';
import { getNonce } from './util';

export class TranslatolEditorProvider implements vscode.CustomTextEditorProvider {
  public static register(context: vscode.ExtensionContext): vscode.Disposable {
    const provider = new TranslatolEditorProvider(context);
    const providerRegistration = vscode.window.registerCustomEditorProvider(TranslatolEditorProvider.viewType, provider);
    return providerRegistration;
  }

  private static readonly viewType = 'translatol.xlf';

  constructor(private readonly context: vscode.ExtensionContext) {}

  /**
   * Called when our custom editor is opened.
   */
  public async resolveCustomTextEditor(
    document: vscode.TextDocument,
    webviewPanel: vscode.WebviewPanel,
    _token: vscode.CancellationToken
  ): Promise<void> {
    // Setup initial content for the webview
    webviewPanel.webview.options = {
      enableScripts: true,
    };
    webviewPanel.webview.html = this.getHtmlForWebview(webviewPanel.webview);

    console.log('setup updateWebview');
    function updateWebview() {
      console.log('updateWebview', document.getText());

      webviewPanel.webview.postMessage({
        type: 'update',
        text: document.getText(),
      });
    }

    // Hook up event handlers so that we can synchronize the webview with the text document.
    //
    // The text document acts as our model, so we have to sync change in the document to our
    // editor and sync changes in the editor back to the document.
    //
    // Remember that a single text document can also be shared between multiple custom
    // editors (this happens for example when you split a custom editor)

    const changeDocumentSubscription = vscode.workspace.onDidChangeTextDocument(e => {
      if (e.document.uri.toString() === document.uri.toString()) {
        updateWebview();
      }
    });

    // Make sure we get rid of the listener when our editor is closed.
    webviewPanel.onDidDispose(() => {
      changeDocumentSubscription.dispose();
    });

    // Receive message from the webview.
    webviewPanel.webview.onDidReceiveMessage(event => {
      console.log('Receive message from the webview', event);
    });

    updateWebview();
  }

  /**
   * Get the static html used for the editor webview
   */
  private getHtmlForWebview(webview: vscode.Webview): string {
    console.log('getHtmlForWebview');
    // Local path to script and css for the webview
    const angularCSSURI = webview.asWebviewUri(vscode.Uri.joinPath(this.context.extensionUri, 'translatol-vscode-webview', 'styles.css'));
    const angularRuntimeURI = webview.asWebviewUri(
      vscode.Uri.joinPath(this.context.extensionUri, 'translatol-vscode-webview', 'runtime.js')
    );
    const angularPolyfillsURI = webview.asWebviewUri(
      vscode.Uri.joinPath(this.context.extensionUri, 'translatol-vscode-webview', 'polyfills.js')
    );
    const angularMainURI = webview.asWebviewUri(vscode.Uri.joinPath(this.context.extensionUri, 'translatol-vscode-webview', 'main.js'));

    // Use a nonce to whitelist which scripts can be run
    const nonce = getNonce();

    // HTML borrowed from index.html generated by Angular in webview dist
    return `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <!--
		Use a content security policy to only allow loading images from https or from our extension directory,
		and only allow scripts that have a specific nonce.
		-->
    <!--
		<meta http-equiv="Content-Security-Policy" content="default-src 'none'; img-src ${webview.cspSource}; style-src ${webview.cspSource}; script-src 'nonce-${nonce}';">
    -->
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
    <base href="/">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="${angularCSSURI}">
  </head>
  <body>
    <app-root></app-root>
    <script src="${angularRuntimeURI}" type="module"></script>
    <script src="${angularPolyfillsURI}" type="module"></script>
    <script src="${angularMainURI}" type="module"></script>
  </body>
</html>
`;
  }
}
